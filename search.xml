<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title> websocket实现服务器端消息推送</title>
      <link href="/zxy12666.github.io/2019/06/21/websocket%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>/zxy12666.github.io/2019/06/21/websocket%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>一、准备<br>实现主要分为服务器端和客户端，客户端通过websocket与服务器端保持连接，这样服务器就可以向客户端主动发起请求。</p><p>二、服务器端<br>服务器端我是使用的springboot，要是用websocket只需要引入websocket的依赖即可</p><p><dependency><br>    <groupid>org.springframework.boot</groupid><br>    <artifactid>spring-boot-starter-websocket</artifactid><br>    <version>2.0.4.RELEASE</version><br></dependency><br>然后主要需要实现两个类，一个是websocket的配置类，还有一个是提供其他服务调用的Service</p><p>WebSocketConfig.java</p><p>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.socket.server.standard.ServerEndpointExporter;</p><p>/**</p><ul><li>@author chenwenrui</li><li>@description: WebSocket配置类</li><li>@date 2019/6/11 18:17<br> */<br> @Configuration<br> public class WebSocketConfig {<br> @Bean<br> public ServerEndpointExporter serverEndpointExporter() {<pre><code>return new ServerEndpointExporter();</code></pre> }<br> }<br> 这个配置文件只起到一个作用就是注册ServerEndpointExporter对象，这个bean会自动注册使用了@ServerEndpoint注解声明的类，比如下面的WebSocketService类</li></ul><p>WebSocketService.java</p><p>import org.springframework.stereotype.Service;<br>import javax.websocket.*;<br>import javax.websocket.server.PathParam;<br>import javax.websocket.server.ServerEndpoint;<br>import java.io.IOException;<br>import java.util.List;<br>import java.util.concurrent.CopyOnWriteArraySet;<br>import java.util.stream.Collectors;</p><p>/**</p><ul><li>@author chenwenrui</li><li>@description: TODO</li><li><p>@date 2019/6/11 18:11<br> */<br> @Service<br> @ServerEndpoint(value = “/websocket/{userId}”)<br> public class WebSocketService {</p><p> /**</p><ul><li><p>concurrent包的线程安全Set，用来存放每个客户端对应的WebSocketSet对象。<br> */<br> private static CopyOnWriteArraySet<websocketservice> webSocketSet = new CopyOnWriteArraySet&lt;&gt;();</websocketservice></p><p>/**</p></li><li><p>与某个客户端的连接会话，需要通过它来给客户端发送数据<br> */<br> private Session session;</p><p>/**</p></li><li><p>客户端用户id<br> */<br> private String userId;</p><p>/**</p></li><li><p>连接建立成功调用的方法<br> */<br> @OnOpen<br> public void onOpen(Session session, @PathParam(“userId”) String userId) {<br> this.session = session;<br> this.userId = userId;<br> if (userId != null) {</p><pre><code>webSocketSet.add(this);     //加入set中</code></pre><p> }<br> }</p><p>/**</p></li><li><p>连接关闭调用的方法<br> */<br> @OnClose<br> public void onClose() {<br> webSocketSet.remove(this);  //从set中删除<br> }</p><p>/**</p></li><li>收到客户端消息后调用的方法<br> *</li><li><p>@param message 客户端发送过来的消息<br> */<br> @OnMessage<br> public void onMessage(String message, Session session) {</p><p>}</p><p>/**</p></li><li>发生错误时调用<br> *</li><li>@param session</li><li><p>@param error<br> */<br> @OnError<br> public void onError(Session session, Throwable error) {<br> error.printStackTrace();<br> }</p><p>/**</p></li><li>向客户端发送消息<br> *</li><li>@param message 消息内容</li><li>@param userIds 需要发送的客户端用户id列表<br> */<br> public void sendMessage(String message, List<string> userIds) {<br> // 需要发送消息的客户端<br> List<websocketservice> services = webSocketSet.stream()<pre><code>.filter(temp -&gt; userIds.contains(temp.userId)).collect(Collectors.toList());</code></pre> services.forEach(temp -&gt; {<pre><code>try {    temp.session.getBasicRemote().sendText(message);} catch (IOException e) {    e.printStackTrace();}</code></pre> });<br> }<br> }<br> @ServerEndpoint表示这是一个websocket，因为登录的每一个用户都是一个客户端，所以这里使用用户的id区分不同的客户端，以方便给对应的用户发送消息，每一个客户端发起websocket连接请求的时候，需要把对应对象(WebSocketService，主要是保存userId以及对应客户端的Session)保存到集合里(要供其他服务调用)，用户关闭连接的时候同时需要从集合中去除。</websocketservice></string></li></ul></li></ul><p>三、客户端<br>客户端我是使用的vue,只需要在mounted()钩子里面打开websocket的连接即可</p><p>mounted(){<br>    let websocket = new WebSocket(<br>        “ws://localhost:8089/websocket/“ + userId<br>    );<br>     //连接成功建立的回调方法<br>    websocket.onopen = function(event) {<br>        console.log(“连接成功”);<br>    };<br>    //接收到消息的回调方法<br>    websocket.onmessage = function(event) {<br>        console.log(event);<br>    };<br>     //连接关闭的回调方法<br>    websocket.onclose = function() {<br>        console.log(“连接关闭”);<br>    };<br>    //连接发生错误的回调方法<br>    websocket.onerror = function() {<br>        console.log(“发生错误”);<br>    };<br>}</p><h2 id="在实例化WebSocket对象的时候，添加了当前登录用户的用户id-token也行，只要是能确保当前状态下是唯一的-，用于标记每一个客户端对应的WebSocket连接。"><a href="#在实例化WebSocket对象的时候，添加了当前登录用户的用户id-token也行，只要是能确保当前状态下是唯一的-，用于标记每一个客户端对应的WebSocket连接。" class="headerlink" title="在实例化WebSocket对象的时候，添加了当前登录用户的用户id(token也行，只要是能确保当前状态下是唯一的)，用于标记每一个客户端对应的WebSocket连接。"></a>在实例化WebSocket对象的时候，添加了当前登录用户的用户id(token也行，只要是能确保当前状态下是唯一的)，用于标记每一个客户端对应的WebSocket连接。</h2><p>作者：大锅睿<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/cwr452829537/article/details/91580331" target="_blank" rel="noopener">https://blog.csdn.net/cwr452829537/article/details/91580331</a> </p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot配置memcache</title>
      <link href="/zxy12666.github.io/2019/06/21/Springboot%E9%85%8D%E7%BD%AEmemcache/"/>
      <url>/zxy12666.github.io/2019/06/21/Springboot%E9%85%8D%E7%BD%AEmemcache/</url>
      
        <content type="html"><![CDATA[<h2 id="Memcached-介绍"><a href="#Memcached-介绍" class="headerlink" title="Memcached 介绍"></a>Memcached 介绍</h2><p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。</p><p>因为 Spring Boot 没有针对 Memcached 提供对应的组建包，因此需要我们自己来集成。官方推出的 Java 客户端 Spymemcached 是一个比较好的选择之一。</p><h2 id="Spymemcached-介绍"><a href="#Spymemcached-介绍" class="headerlink" title="Spymemcached 介绍"></a>Spymemcached 介绍</h2><p>Spymemcached 最早由 Dustin Sallings 开发，Dustin 后来和别人一起创办了 Couchbase (原NorthScale)，职位为首席架构师。2014 加入 Google。</p><p>Spymemcached 是一个采用 Java 开发的异步、单线程的 Memcached 客户端， 使用 NIO 实现。Spymemcached 是 Memcached 的一个流行的 Java client 库，性能表现出色，广泛应用于 Java + Memcached 项目中。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p><strong>添加依赖</strong></p><p>pomx 包中添加 spymemcached 的引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;net.spy&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spymemcached&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.12.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在项目resource-&gt;config-&gt;dev和pro中新增memcachedconf.properties，<br><img src="http://i1.fuimg.com/691375/616e1938ee018f68s.png" alt="Markdown"></p><p>这时需要使用@PropertySource注解加载指定的属性文件。</p><p><strong>设置配置对象</strong></p><p>创建 <code>MemcacheSource</code> 接收配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package olaf.olaf.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;memcached&quot;)</span><br><span class="line">@PropertySource(&quot;classpath:memcachedconf.properties&quot;)</span><br><span class="line">public class MemcacheSource &#123;</span><br><span class="line">    private boolean isOpen;</span><br><span class="line"></span><br><span class="line">    private String servers;</span><br><span class="line"></span><br><span class="line">    private int expires;</span><br><span class="line"></span><br><span class="line">    private int port;</span><br><span class="line"></span><br><span class="line">    private int connectionPoolSize;</span><br><span class="line"></span><br><span class="line">    private String pre;</span><br><span class="line"></span><br><span class="line">    public String getPre() &#123;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPre(String pre) &#123;</span><br><span class="line">        this.pre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean getIsOpen() &#123;</span><br><span class="line">        return isOpen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIsOpen(boolean open) &#123;</span><br><span class="line">        isOpen = open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getServers() &#123;</span><br><span class="line">        return servers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setServers(String servers) &#123;</span><br><span class="line">        this.servers = servers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getExpires() &#123;</span><br><span class="line">        return expires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setExpires(int expires) &#123;</span><br><span class="line">        this.expires = expires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPort() &#123;</span><br><span class="line">        return port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPort(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getConnectionPoolSize() &#123;</span><br><span class="line">        return connectionPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setConnectionPoolSize(int connectionPoolSize) &#123;</span><br><span class="line">        this.connectionPoolSize = connectionPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ConfigurationProperties(prefix = &quot;memcache&quot;)</code> 的意思会以 <code>memcache.*</code> 为开通将对应的配置文件加载到属性中。</p><h2 id="启动初始化-MemcachedClient"><a href="#启动初始化-MemcachedClient" class="headerlink" title="启动初始化 MemcachedClient"></a>启动初始化 MemcachedClient</h2><p><code>CommandLineRunner</code> 接口的 <code>Component</code> 会在所有 <code>Spring Beans</code>都初始化之后，<code>SpringApplication.run()</code>之前执行，非常适合在应用程序启动之初进行一些数据初始化的工作。利用 CommandLineRunner 在项目启动的时候配置好 MemcachedClient 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line">package olaf.olaf.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import net.spy.memcached.MemcachedClient;</span><br><span class="line">import org.apache.commons.logging.Log;</span><br><span class="line">import org.apache.commons.logging.LogFactory;</span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Author: yuanhy</span><br><span class="line"> * Time: 2017-9-6  17:04</span><br><span class="line"> * Description:</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class Memcached implements CommandLineRunner &#123;</span><br><span class="line">    private static Log log = LogFactory.getLog(Memcached.class);</span><br><span class="line"></span><br><span class="line">    private MemcachedClient mc;</span><br><span class="line"></span><br><span class="line">    public final static int DEFAULT_TIMEOUT = 5;</span><br><span class="line">    /**</span><br><span class="line">     * The constant timeUnitSeconds.</span><br><span class="line">     */</span><br><span class="line">    public final static TimeUnit timeUnitSeconds = TimeUnit.SECONDS;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private  MemcacheSource memcacheSource;</span><br><span class="line">    /*</span><br><span class="line">    set 无论何时都保存</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void set(String key, T value) &#123;</span><br><span class="line">        this.set(key, memcacheSource.getExpires(), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置键值对</span><br><span class="line">     *</span><br><span class="line">     * @param key     key</span><br><span class="line">     * @param expires 单位:秒，0 表示永不过期</span><br><span class="line">     * @param value   必须是一个可序列化的对象, 可以是容器类型如:List，但容器里面保存的对象必须是可序列化的</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void set(String key, int expires, T value) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (memcacheSource.getIsOpen() &amp;&amp; mc != null) &#123;</span><br><span class="line">                Future&lt;Boolean&gt; rs = mc.set(memcacheSource.getPre() + key, expires, value);</span><br><span class="line">                System.out.println(rs.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据key获得值</span><br><span class="line">     *</span><br><span class="line">     * @param key key</span><br><span class="line">     * @return value</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T get(String key) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!StringUtils.isEmpty(key) &amp;&amp; memcacheSource.getIsOpen() &amp;&amp; mc != null) &#123;</span><br><span class="line">                return (T) mc.get(memcacheSource.getPre()+ key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将对象添加到缓存</span><br><span class="line">     *</span><br><span class="line">     * @param key    the key</span><br><span class="line">     * @param value  the value</span><br><span class="line">     * @param expire the expire</span><br><span class="line">     * @return the boolean</span><br><span class="line">     */</span><br><span class="line">    public Boolean add(String key, Object value, int expire) &#123;</span><br><span class="line">        Future&lt;Boolean&gt; f = mc.add(key, expire, value);</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 替换某个键值</span><br><span class="line">     *</span><br><span class="line">     * @param key    the 键</span><br><span class="line">     * @param value  the 值</span><br><span class="line">     * @param expire the 过期时间</span><br><span class="line">     * @return the boolean</span><br><span class="line">     */</span><br><span class="line">    public Boolean replace(String key, Object value, int expire) &#123;</span><br><span class="line">        Future&lt;Boolean&gt; f = mc.replace(key, expire, value);</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除某个特定键</span><br><span class="line">     *</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @return the boolean</span><br><span class="line">     */</span><br><span class="line">    public Boolean delete(String key) &#123;</span><br><span class="line">        Future&lt;Boolean&gt; f = mc.delete(key);</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 立即从所有服务器清除所有缓存,慎用。</span><br><span class="line">     *</span><br><span class="line">     * @return the boolean</span><br><span class="line">     */</span><br><span class="line">    @Deprecated</span><br><span class="line">    public Boolean flush() &#123;</span><br><span class="line">        Future&lt;Boolean&gt; f = mc.flush();</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从缓存中获取多个键值。</span><br><span class="line">     *</span><br><span class="line">     * @param keys the 键集合</span><br><span class="line">     * @return the multi</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Object&gt; getMulti(Collection&lt;String&gt; keys) &#123;</span><br><span class="line">        return mc.getBulk(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从缓存中获取多个键值</span><br><span class="line">     *</span><br><span class="line">     * @param keys the 键数组</span><br><span class="line">     * @return the multi</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Object&gt; getMulti(String[] keys) &#123;</span><br><span class="line">        return mc.getBulk(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 异步地从缓存中获取一组对象并使用它们进行解码</span><br><span class="line">     *</span><br><span class="line">     * @param keys the 键集合</span><br><span class="line">     * @return the map</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Object&gt; asyncGetMulti(Collection&lt;String&gt; keys) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = null;</span><br><span class="line">        Future&lt;Map&lt;String, Object&gt;&gt; f = mc.asyncGetBulk(keys);</span><br><span class="line">        try &#123;</span><br><span class="line">            map = getResult(f);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            f.cancel(false);</span><br><span class="line">        &#125;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 增加给定的计数器，返回新值。</span><br><span class="line">     *</span><br><span class="line">     * @param key          the key</span><br><span class="line">     * @param by           the 增值</span><br><span class="line">     * @param defaultValue the 默认值(如计时器不存在)，如该key没值，则取默认值</span><br><span class="line">     * @param expire       the 过期时间</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public long increment(String key, int by, long defaultValue, int expire) &#123;</span><br><span class="line">        return mc.incr(key, by, defaultValue, expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 以给定的数量增加给定的键。</span><br><span class="line">     *</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param by  the 增值</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public long increment(String key, int by) &#123;</span><br><span class="line">        return mc.incr(key, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 减量.</span><br><span class="line">     *</span><br><span class="line">     * @param key          the key</span><br><span class="line">     * @param by           the 减量</span><br><span class="line">     * @param defaultValue the 默认值(如果计数器不存在)</span><br><span class="line">     * @param expire       the 过期时间</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public long decrement(String key, int by, long defaultValue, int expire) &#123;</span><br><span class="line">        return mc.decr(key, by, defaultValue, expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 减量</span><br><span class="line">     *</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param by  the 要减的值</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public long decrement(String key, int by) &#123;</span><br><span class="line">        return mc.decr(key, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 异步增量，并返回当前值.</span><br><span class="line">     *</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param by  the 要增加的值</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public Long asyncIncrement(String key, int by) &#123;</span><br><span class="line">        Future&lt;Long&gt; f = mc.asyncIncr(key, by);</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Async decrement long.</span><br><span class="line">     * 异步减量，并返回当前值</span><br><span class="line">     *</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param by  the 要减少的值</span><br><span class="line">     * @return the long</span><br><span class="line">     */</span><br><span class="line">    public Long asyncDecrement(String key, int by) &#123;</span><br><span class="line">        Future&lt;Long&gt; f = mc.asyncDecr(key, by);</span><br><span class="line">        return getResult(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Gets result.</span><br><span class="line">     * 获取返回结果</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;T&gt;    the type parameter</span><br><span class="line">     * @param future the future</span><br><span class="line">     * @return the result</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T getResult(Future&lt;T&gt; future) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return future.get(DEFAULT_TIMEOUT,</span><br><span class="line">                    timeUnitSeconds);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;获取返回结果失败!&#123;&#125;&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     */</span><br><span class="line">    public void disConnect() &#123;</span><br><span class="line">        if (mc == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        mc.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;The Runner start to initialize ...&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            mc = new MemcachedClient(new InetSocketAddress(memcacheSource.getServers(),memcacheSource.getPort()));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;inint MemcachedClient failed &quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memcached.&lt;UserVo&gt;set(vo.getLoginName(), 43200, vo);</span><br><span class="line">UserVo vo = memcached.get(loginToken);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter国际化设置在iOS设备上不生效的问题</title>
      <link href="/zxy12666.github.io/2019/05/16/Flutter%E5%9B%BD%E9%99%85%E5%8C%96%E8%AE%BE%E7%BD%AE%E5%9C%A8iOS%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/zxy12666.github.io/2019/05/16/Flutter%E5%9B%BD%E9%99%85%E5%8C%96%E8%AE%BE%E7%BD%AE%E5%9C%A8iOS%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>参考官方资料，添加了中文国际化相关配置代码：</p><pre><code>class App extends StatelessWidget {  // This widget is the root of your application.  @override  Widget build(BuildContext context) {    return new MaterialApp(      title: &apos;饭点&apos;,      theme: new ThemeData(        primarySwatch: Colors.blue,      ),      home: new MainPage(title: &apos;饭点&apos;),      localizationsDelegates: [        GlobalMaterialLocalizations.delegate,        GlobalWidgetsLocalizations.delegate,      ],      supportedLocales: [        const Locale(&apos;zh&apos;, &apos;CH&apos;),        const Locale(&apos;en&apos;, &apos;US&apos;),      ],    );  }}</code></pre><p>实际运行发现，即便设备已经设置了中文和中国地区，但iOS设备上依旧显示英文，Android设备就没有这个问题。</p><p>俺做iOS已经是6年前的事情了，现在可以说开发经验几乎归零了，摸索了一顿找到了解决方案。</p><p>使用Xcode打开ios项目：</p><p><img src="https://stanzhai.site/api/file/getImage?fileId=5bb5d12dba8bc2481f000436" alt></p><p>然后再项目设置里添加一个中文的国际化配置：</p><p><img src="https://stanzhai.site/api/file/getImage?fileId=5bb5d12dba8bc2481f000437" alt></p><p>然后在重新打包就可以了。</p><p></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element UI实现动态生成多级表头</title>
      <link href="/zxy12666.github.io/2019/05/05/element-UI%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4/"/>
      <url>/zxy12666.github.io/2019/05/05/element-UI%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<div class="post"><br><br><strong>一、效果图</strong><br><br><img src="https://images2018.cnblogs.com/blog/1429393/201808/1429393-20180816195340083-491882635.png" alt="Markdown"><br><br><img src="https://images2018.cnblogs.com/blog/1429393/201808/1429393-20180816195421784-1185412164.png" alt="Markdown"><br><br><strong>二、封装两个组件，分别为DynamicTable.vue和TableColumn.vue，TableColumn.vue主要是使用递归来对表头进行循环生成</strong><br><br>DynamicTable.vue<br><br><br><pre><span style="color: #008080;"> 1</span> &lt;template&gt;<br><span style="color: #008080;"> 2</span>   &lt;el-table :data=”tableData” border :height=”height”&gt;<br><span style="color: #008080;"> 3</span>     &lt;template v-<span style="color: #0000ff;">for</span>=”item in tableHeader”&gt;<br><span style="color: #008080;"> 4</span>       &lt;table-column v-<span style="color: #0000ff;">if</span>=”item.children &amp;&amp; item.children.length” :key=”item.id” :coloumn-header=”item”&gt;&lt;/table-column&gt;<br><span style="color: #008080;"> 5</span>       &lt;el-table-column v-<span style="color: #0000ff;">else</span> :key=”item.id” :label=”item.label” :prop=”item.prop” align=”center”&gt;&lt;/el-table-column&gt;<br><span style="color: #008080;"> 6</span>     &lt;/template&gt;<br><span style="color: #008080;"> 7</span>   &lt;/el-table&gt;<br><span style="color: #008080;"> 8</span> &lt;/template&gt;<br><span style="color: #008080;"> 9</span><br><span style="color: #008080;">10</span> &lt;script&gt;<br><span style="color: #008080;">11</span> import TableColumn from ‘./TableColumn’<br><span style="color: #008080;">12</span> export <span style="color: #0000ff;">default</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">13</span> <span style="color: #000000;">  props: {<br></span><span style="color: #008080;">14</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 表格的数据</span><br><span style="color: #008080;">15</span> <span style="color: #000000;">    tableData: {<br></span><span style="color: #008080;">16</span> <span style="color: #000000;">      type: Array,<br></span><span style="color: #008080;">17</span>       required: <span style="color: #0000ff;">true</span><br><span style="color: #008080;">18</span> <span style="color: #000000;">    },<br></span><span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 多级表头的数据</span><br><span style="color: #008080;">20</span> <span style="color: #000000;">    tableHeader: {<br></span><span style="color: #008080;">21</span> <span style="color: #000000;">      type: Array,<br></span><span style="color: #008080;">22</span>       required: <span style="color: #0000ff;">true</span><br><span style="color: #008080;">23</span> <span style="color: #000000;">    },<br></span><span style="color: #008080;">24</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 表格的高度</span><br><span style="color: #008080;">25</span> <span style="color: #000000;">    height: {<br></span><span style="color: #008080;">26</span> <span style="color: #000000;">      type: String,<br></span><span style="color: #008080;">27</span>       <span style="color: #0000ff;">default</span>: ‘300’<br><span style="color: #008080;">28</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">29</span> <span style="color: #000000;">  },<br></span><span style="color: #008080;">30</span> <span style="color: #000000;">  components: {<br></span><span style="color: #008080;">31</span> <span style="color: #000000;">    TableColumn<br></span><span style="color: #008080;">32</span> <span style="color: #000000;">  }<br></span><span style="color: #008080;">33</span> <span style="color: #000000;">}<br></span><span style="color: #008080;">34</span> &lt;/script&gt;<br><span style="color: #008080;">35</span><br><span style="color: #008080;">36</span> &lt;style scoped&gt;<br><span style="color: #008080;">37</span><br><span style="color: #008080;">38</span> &lt;/style&gt;</pre><br><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>; “复制代码”)</span></div></div><p>TableColumn.vue</p><pre>&lt;template&gt;  &lt;el-table-column :label="coloumnHeader.label" :prop="coloumnHeader.label" align="center"&gt;    &lt;template v-<span style="color: #0000ff;">for</span>="item in coloumnHeader.children"&gt;      &lt;tableColumn v-<span style="color: #0000ff;">if</span>="item.children &amp;&amp; item.children.length" :key="item.id" :coloumn-header="item"&gt;&lt;/tableColumn&gt;      &lt;el-table-column v-<span style="color: #0000ff;">else</span> :key="item.name" :label="item.label" :prop="item.prop" align="center"&gt;&lt;/el-table-column&gt;    &lt;/template&gt;  &lt;/el-table-column&gt;&lt;/template&gt;&lt;script&gt;<span style="color: #000000;">export </span><span style="color: #0000ff;">default</span><span style="color: #000000;"> {  name: </span>'tableColumn'<span style="color: #000000;">,  props: {    coloumnHeader: {      type: Object,      required: </span><span style="color: #0000ff;">true</span><span style="color: #000000;">    }  }}</span>&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy">[![复制代码](//common.cnblogs.com/images/copycode.gif)](javascript:void(0); "复制代码")</span></div>**三、使用**HTML代码<div class="cnblogs_code"><pre><span style="color: #008080;">1</span>     &lt;div class="result-wrapper"&gt;<span style="color: #008080;">2</span>       &lt;dynamic-table :table-data="tableData" :table-header="tableConfig" v-<span style="color: #0000ff;">if</span>="dynamicTableShow"&gt;&lt;/dynamic-table&gt;<span style="color: #008080;">3</span>       &lt;dynamic-form v-<span style="color: #0000ff;">else</span>&gt;&lt;/dynamic-form&gt;<span style="color: #008080;">4</span>     &lt;/div&gt;</pre></div>JS代码<pre><span style="color: #008080;">  1</span> &lt;script&gt;<span style="color: #008080;">  2</span> import DynamicTable from './components/DynamicTable'<span style="color: #008080;">  3</span> export <span style="color: #0000ff;">default</span><span style="color: #000000;"> {</span><span style="color: #008080;">  4</span> <span style="color: #000000;">  components: {</span><span style="color: #008080;">  5</span> <span style="color: #000000;">    DynamicTable</span><span style="color: #008080;">  6</span> <span style="color: #000000;">  },</span><span style="color: #008080;">  7</span> <span style="color: #000000;">  data () {</span><span style="color: #008080;">  8</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> {</span><span style="color: #008080;">  9</span> <span style="color: #000000;">      searchForm: {</span><span style="color: #008080;"> 10</span> <span style="color: #000000;">        month: getMonth(),</span><span style="color: #008080;"> 11</span>         serviceCategory: '1'<span style="color: #008080;"> 12</span> <span style="color: #000000;">      },</span><span style="color: #008080;"> 13</span>       dynamicTableShow: <span style="color: #0000ff;">true</span>, <span style="color: #008000;">//</span><span style="color: #008000;"> 使得DynamicTable组件重新渲染变量</span><span style="color: #008080;"> 14</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> 表数据</span><span style="color: #008080;"> 15</span> <span style="color: #000000;">      tableData: [</span><span style="color: #008080;"> 16</span> <span style="color: #000000;">        {</span><span style="color: #008080;"> 17</span>           districtName: '1'<span style="color: #000000;">,</span><span style="color: #008080;"> 18</span>           timeDimension: '2'<span style="color: #000000;">,</span><span style="color: #008080;"> 19</span>           residentPopNum: '3'<span style="color: #000000;">,</span><span style="color: #008080;"> 20</span>           residentPopDst: '4'<span style="color: #000000;">,</span><span style="color: #008080;"> 21</span>           liveLandArea: '5'<span style="color: #000000;">,</span><span style="color: #008080;"> 22</span>           liveLandDst: '6'<span style="color: #000000;">,</span><span style="color: #008080;"> 23</span>           employmentLandArea: '7'<span style="color: #000000;">,</span><span style="color: #008080;"> 24</span>           employmentLandDst: '8'<span style="color: #008080;"> 25</span> <span style="color: #000000;">        }</span><span style="color: #008080;"> 26</span> <span style="color: #000000;">      ],</span><span style="color: #008080;"> 27</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> 表头数据</span><span style="color: #008080;"> 28</span> <span style="color: #000000;">      tableConfig: [</span><span style="color: #008080;"> 29</span> <span style="color: #000000;">        {</span><span style="color: #008080;"> 30</span>           id: 100<span style="color: #000000;">,</span><span style="color: #008080;"> 31</span>           label: '一级表头'<span style="color: #000000;">,</span><span style="color: #008080;"> 32</span>           prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 33</span> <span style="color: #000000;">          children: [</span><span style="color: #008080;"> 34</span> <span style="color: #000000;">            {</span><span style="color: #008080;"> 35</span>               id: 110<span style="color: #000000;">,</span><span style="color: #008080;"> 36</span>               label: '二级表头1'<span style="color: #000000;">,</span><span style="color: #008080;"> 37</span>               prop: 'districtName'<span style="color: #008080;"> 38</span> <span style="color: #000000;">            },</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">            {</span><span style="color: #008080;"> 40</span>               id: 120<span style="color: #000000;">,</span><span style="color: #008080;"> 41</span>               label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;"> 42</span>               prop: 'timeDimension'<span style="color: #008080;"> 43</span> <span style="color: #000000;">            }</span><span style="color: #008080;"> 44</span> <span style="color: #000000;">          ]</span><span style="color: #008080;"> 45</span> <span style="color: #000000;">        },</span><span style="color: #008080;"> 46</span> <span style="color: #000000;">        {</span><span style="color: #008080;"> 47</span>           id: 200<span style="color: #000000;">,</span><span style="color: #008080;"> 48</span>           label: '一级表头1'<span style="color: #000000;">,</span><span style="color: #008080;"> 49</span>           prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 50</span> <span style="color: #000000;">          children: [</span><span style="color: #008080;"> 51</span> <span style="color: #000000;">            {</span><span style="color: #008080;"> 52</span>               id: 210<span style="color: #000000;">,</span><span style="color: #008080;"> 53</span>               label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;"> 54</span>               prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 55</span> <span style="color: #000000;">              children: [</span><span style="color: #008080;"> 56</span> <span style="color: #000000;">                {</span><span style="color: #008080;"> 57</span>                   id: 211<span style="color: #000000;">,</span><span style="color: #008080;"> 58</span>                   label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;"> 59</span>                   prop: 'residentPopNum'<span style="color: #008080;"> 60</span> <span style="color: #000000;">                },</span><span style="color: #008080;"> 61</span> <span style="color: #000000;">                {</span><span style="color: #008080;"> 62</span>                   id: 212<span style="color: #000000;">,</span><span style="color: #008080;"> 63</span>                   label: '三级表头'<span style="color: #000000;">,</span><span style="color: #008080;"> 64</span>                   prop: 'residentPopDst'<span style="color: #008080;"> 65</span> <span style="color: #000000;">                }</span><span style="color: #008080;"> 66</span> <span style="color: #000000;">              ]</span><span style="color: #008080;"> 67</span> <span style="color: #000000;">            }</span><span style="color: #008080;"> 68</span> <span style="color: #000000;">          ]</span><span style="color: #008080;"> 69</span> <span style="color: #000000;">        },</span><span style="color: #008080;"> 70</span> <span style="color: #000000;">        {</span><span style="color: #008080;"> 71</span>           id: 300<span style="color: #000000;">,</span><span style="color: #008080;"> 72</span>           label: '一级表头1'<span style="color: #000000;">,</span><span style="color: #008080;"> 73</span>           prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 74</span> <span style="color: #000000;">          children: [</span><span style="color: #008080;"> 75</span> <span style="color: #000000;">            {</span><span style="color: #008080;"> 76</span>               id: 310<span style="color: #000000;">,</span><span style="color: #008080;"> 77</span>               label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;"> 78</span>               prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 79</span> <span style="color: #000000;">              children: [</span><span style="color: #008080;"> 80</span> <span style="color: #000000;">                {</span><span style="color: #008080;"> 81</span>                   id: 311<span style="color: #000000;">,</span><span style="color: #008080;"> 82</span>                   label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;"> 83</span>                   prop: 'liveLandArea'<span style="color: #008080;"> 84</span> <span style="color: #000000;">                },</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">                {</span><span style="color: #008080;"> 86</span>                   id: 312<span style="color: #000000;">,</span><span style="color: #008080;"> 87</span>                   label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;"> 88</span>                   prop: 'liveLandDst'<span style="color: #008080;"> 89</span> <span style="color: #000000;">                }</span><span style="color: #008080;"> 90</span> <span style="color: #000000;">              ]</span><span style="color: #008080;"> 91</span> <span style="color: #000000;">            },</span><span style="color: #008080;"> 92</span> <span style="color: #000000;">            {</span><span style="color: #008080;"> 93</span>               id: 320<span style="color: #000000;">,</span><span style="color: #008080;"> 94</span>               label: '二级表头1'<span style="color: #000000;">,</span><span style="color: #008080;"> 95</span>               prop: ''<span style="color: #000000;">,</span><span style="color: #008080;"> 96</span> <span style="color: #000000;">              children: [</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">                {</span><span style="color: #008080;"> 98</span>                   id: 321<span style="color: #000000;">,</span><span style="color: #008080;"> 99</span>                   label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">100</span>                   prop: 'employmentLandArea'<span style="color: #008080;">101</span> <span style="color: #000000;">                },</span><span style="color: #008080;">102</span> <span style="color: #000000;">                {</span><span style="color: #008080;">103</span>                   id: 322<span style="color: #000000;">,</span><span style="color: #008080;">104</span>                   label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">105</span>                   prop: 'employmentLandDst'<span style="color: #008080;">106</span> <span style="color: #000000;">                }</span><span style="color: #008080;">107</span> <span style="color: #000000;">              ]</span><span style="color: #008080;">108</span> <span style="color: #000000;">            }</span><span style="color: #008080;">109</span> <span style="color: #000000;">          ]</span><span style="color: #008080;">110</span> <span style="color: #000000;">        }</span><span style="color: #008080;">111</span> <span style="color: #000000;">      ]</span><span style="color: #008080;">112</span> <span style="color: #000000;">    }</span><span style="color: #008080;">113</span> <span style="color: #000000;">  },</span><span style="color: #008080;">114</span> <span style="color: #000000;">  methods: {</span><span style="color: #008080;">115</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 服务类型改变的时候，需要重新请求表头信息和表格数据</span><span style="color: #008080;">116</span> <span style="color: #000000;">    handleServiceCategoryChange (val) {</span><span style="color: #008080;">117</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> 设置dynamicTableShow为false，使得DynamicTable组件重新渲染</span><span style="color: #008080;">118</span>       <span style="color: #0000ff;">this</span>.dynamicTableShow = <span style="color: #0000ff;">false</span><span style="color: #008080;">119</span>       <span style="color: #0000ff;">if</span> (val === '1'<span style="color: #000000;">) {</span><span style="color: #008080;">120</span>         <span style="color: #0000ff;">this</span>.tableData =<span style="color: #000000;"> [</span><span style="color: #008080;">121</span> <span style="color: #000000;">          {</span><span style="color: #008080;">122</span>             districtName: '1'<span style="color: #000000;">,</span><span style="color: #008080;">123</span>             timeDimension: '2'<span style="color: #000000;">,</span><span style="color: #008080;">124</span>             residentPopNum: '3'<span style="color: #000000;">,</span><span style="color: #008080;">125</span>             residentPopDst: '4'<span style="color: #000000;">,</span><span style="color: #008080;">126</span>             liveLandArea: '5'<span style="color: #000000;">,</span><span style="color: #008080;">127</span>             liveLandDst: '6'<span style="color: #000000;">,</span><span style="color: #008080;">128</span>             employmentLandArea: '7'<span style="color: #000000;">,</span><span style="color: #008080;">129</span>             employmentLandDst: '8'<span style="color: #008080;">130</span> <span style="color: #000000;">          }</span><span style="color: #008080;">131</span> <span style="color: #000000;">        ]</span><span style="color: #008080;">132</span>         <span style="color: #0000ff;">this</span>.tableConfig =<span style="color: #000000;"> [</span><span style="color: #008080;">133</span> <span style="color: #000000;">          {</span><span style="color: #008080;">134</span>             id: 100<span style="color: #000000;">,</span><span style="color: #008080;">135</span>             label: '一级表头'<span style="color: #000000;">,</span><span style="color: #008080;">136</span>             prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">137</span> <span style="color: #000000;">            children: [</span><span style="color: #008080;">138</span> <span style="color: #000000;">              {</span><span style="color: #008080;">139</span>                 id: 110<span style="color: #000000;">,</span><span style="color: #008080;">140</span>                 label: '二级表头1'<span style="color: #000000;">,</span><span style="color: #008080;">141</span>                 prop: 'districtName'<span style="color: #008080;">142</span> <span style="color: #000000;">              },</span><span style="color: #008080;">143</span> <span style="color: #000000;">              {</span><span style="color: #008080;">144</span>                 id: 120<span style="color: #000000;">,</span><span style="color: #008080;">145</span>                 label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;">146</span>                 prop: 'timeDimension'<span style="color: #008080;">147</span> <span style="color: #000000;">              }</span><span style="color: #008080;">148</span> <span style="color: #000000;">            ]</span><span style="color: #008080;">149</span> <span style="color: #000000;">          },</span><span style="color: #008080;">150</span> <span style="color: #000000;">          {</span><span style="color: #008080;">151</span>             id: 200<span style="color: #000000;">,</span><span style="color: #008080;">152</span>             label: '一级表头1'<span style="color: #000000;">,</span><span style="color: #008080;">153</span>             prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">154</span> <span style="color: #000000;">            children: [</span><span style="color: #008080;">155</span> <span style="color: #000000;">              {</span><span style="color: #008080;">156</span>                 id: 210<span style="color: #000000;">,</span><span style="color: #008080;">157</span>                 label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;">158</span>                 prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">159</span> <span style="color: #000000;">                children: [</span><span style="color: #008080;">160</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">161</span>                     id: 211<span style="color: #000000;">,</span><span style="color: #008080;">162</span>                     label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">163</span>                     prop: 'residentPopNum'<span style="color: #008080;">164</span> <span style="color: #000000;">                  },</span><span style="color: #008080;">165</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">166</span>                     id: 212<span style="color: #000000;">,</span><span style="color: #008080;">167</span>                     label: '三级表头'<span style="color: #000000;">,</span><span style="color: #008080;">168</span>                     prop: 'residentPopDst'<span style="color: #008080;">169</span> <span style="color: #000000;">                  }</span><span style="color: #008080;">170</span> <span style="color: #000000;">                ]</span><span style="color: #008080;">171</span> <span style="color: #000000;">              }</span><span style="color: #008080;">172</span> <span style="color: #000000;">            ]</span><span style="color: #008080;">173</span> <span style="color: #000000;">          },</span><span style="color: #008080;">174</span> <span style="color: #000000;">          {</span><span style="color: #008080;">175</span>             id: 300<span style="color: #000000;">,</span><span style="color: #008080;">176</span>             label: '一级表头1'<span style="color: #000000;">,</span><span style="color: #008080;">177</span>             prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">178</span> <span style="color: #000000;">            children: [</span><span style="color: #008080;">179</span> <span style="color: #000000;">              {</span><span style="color: #008080;">180</span>                 id: 310<span style="color: #000000;">,</span><span style="color: #008080;">181</span>                 label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;">182</span>                 prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">183</span> <span style="color: #000000;">                children: [</span><span style="color: #008080;">184</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">185</span>                     id: 311<span style="color: #000000;">,</span><span style="color: #008080;">186</span>                     label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">187</span>                     prop: 'liveLandArea'<span style="color: #008080;">188</span> <span style="color: #000000;">                  },</span><span style="color: #008080;">189</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">190</span>                     id: 312<span style="color: #000000;">,</span><span style="color: #008080;">191</span>                     label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">192</span>                     prop: 'liveLandDst'<span style="color: #008080;">193</span> <span style="color: #000000;">                  }</span><span style="color: #008080;">194</span> <span style="color: #000000;">                ]</span><span style="color: #008080;">195</span> <span style="color: #000000;">              },</span><span style="color: #008080;">196</span> <span style="color: #000000;">              {</span><span style="color: #008080;">197</span>                 id: 320<span style="color: #000000;">,</span><span style="color: #008080;">198</span>                 label: '二级表头1'<span style="color: #000000;">,</span><span style="color: #008080;">199</span>                 prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">200</span> <span style="color: #000000;">                children: [</span><span style="color: #008080;">201</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">202</span>                     id: 321<span style="color: #000000;">,</span><span style="color: #008080;">203</span>                     label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">204</span>                     prop: 'employmentLandArea'<span style="color: #008080;">205</span> <span style="color: #000000;">                  },</span><span style="color: #008080;">206</span> <span style="color: #000000;">                  {</span><span style="color: #008080;">207</span>                     id: 322<span style="color: #000000;">,</span><span style="color: #008080;">208</span>                     label: '三级表头3'<span style="color: #000000;">,</span><span style="color: #008080;">209</span>                     prop: 'employmentLandDst'<span style="color: #008080;">210</span> <span style="color: #000000;">                  }</span><span style="color: #008080;">211</span> <span style="color: #000000;">                ]</span><span style="color: #008080;">212</span> <span style="color: #000000;">              }</span><span style="color: #008080;">213</span> <span style="color: #000000;">            ]</span><span style="color: #008080;">214</span> <span style="color: #000000;">          }</span><span style="color: #008080;">215</span> <span style="color: #000000;">        ]</span><span style="color: #008080;">216</span>       } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {</span><span style="color: #008080;">217</span>         <span style="color: #0000ff;">this</span>.tableData =<span style="color: #000000;"> [</span><span style="color: #008080;">218</span> <span style="color: #000000;">          {</span><span style="color: #008080;">219</span>             districtName: '111'<span style="color: #000000;">,</span><span style="color: #008080;">220</span>             timeDimension: '222'<span style="color: #008080;">221</span> <span style="color: #000000;">          }</span><span style="color: #008080;">222</span> <span style="color: #000000;">        ]</span><span style="color: #008080;">223</span>         <span style="color: #0000ff;">this</span>.tableConfig =<span style="color: #000000;"> [</span><span style="color: #008080;">224</span> <span style="color: #000000;">          {</span><span style="color: #008080;">225</span>             id: 100<span style="color: #000000;">,</span><span style="color: #008080;">226</span>             label: '一级表头'<span style="color: #000000;">,</span><span style="color: #008080;">227</span>             prop: ''<span style="color: #000000;">,</span><span style="color: #008080;">228</span> <span style="color: #000000;">            children: [</span><span style="color: #008080;">229</span> <span style="color: #000000;">              {</span><span style="color: #008080;">230</span>                 id: 110<span style="color: #000000;">,</span><span style="color: #008080;">231</span>                 label: '二级表头1'<span style="color: #000000;">,</span><span style="color: #008080;">232</span>                 prop: 'districtName'<span style="color: #008080;">233</span> <span style="color: #000000;">              },</span><span style="color: #008080;">234</span> <span style="color: #000000;">              {</span><span style="color: #008080;">235</span>                 id: 120<span style="color: #000000;">,</span><span style="color: #008080;">236</span>                 label: '二级表头2'<span style="color: #000000;">,</span><span style="color: #008080;">237</span>                 prop: 'timeDimension'<span style="color: #008080;">238</span> <span style="color: #000000;">              }</span><span style="color: #008080;">239</span> <span style="color: #000000;">            ]</span><span style="color: #008080;">240</span> <span style="color: #000000;">          }</span><span style="color: #008080;">241</span> <span style="color: #000000;">        ]</span><span style="color: #008080;">242</span> <span style="color: #000000;">      }</span><span style="color: #008080;">243</span>       <span style="color: #008000;">//</span><span style="color: #008000;"> 此处是DOM还没有更新，此处的代码是必须的</span><span style="color: #008080;">244</span>       <span style="color: #0000ff;">this</span>.$nextTick(() =&gt;<span style="color: #000000;"> {</span><span style="color: #008080;">245</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> DOM 现在更新了</span><span style="color: #008080;">246</span>         <span style="color: #0000ff;">this</span>.dynamicTableShow = <span style="color: #0000ff;">true</span><span style="color: #008080;">247</span> <span style="color: #000000;">      })</span><span style="color: #008080;">248</span> <span style="color: #000000;">    }</span><span style="color: #008080;">249</span> <span style="color: #000000;">  }</span><span style="color: #008080;">250</span> <span style="color: #000000;">}</span><span style="color: #008080;">251</span> &lt;/script&gt;<span style="color: #008080;">252</span> <span style="color: #008080;">253</span> &lt;style scoped&gt;<span style="color: #008080;">254</span> .policy-<span style="color: #000000;">wrapper{</span><span style="color: #008080;">255</span>   margin-<span style="color: #000000;">top: 10px;</span><span style="color: #008080;">256</span> <span style="color: #000000;">}</span><span style="color: #008080;">257</span> .result-<span style="color: #000000;">wrapper{</span><span style="color: #008080;">258</span>   margin-<span style="color: #000000;">top: 22px;</span><span style="color: #008080;">259</span> <span style="color: #000000;">}</span><span style="color: #008080;">260</span> &lt;/style&gt;</pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter踩坑记录之IOS输入框长按报错</title>
      <link href="/zxy12666.github.io/2019/03/08/flutter%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B9%8BIOS%E8%BE%93%E5%85%A5%E6%A1%86%E9%95%BF%E6%8C%89%E6%8A%A5%E9%94%99/"/>
      <url>/zxy12666.github.io/2019/03/08/flutter%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B9%8BIOS%E8%BE%93%E5%85%A5%E6%A1%86%E9%95%BF%E6%8C%89%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><div data-note-content class="show-content"><br>    <div class="show-content-free"></div></div></p><p>开发过程中发现在国际化过程中ios输入框长按会报错 flutter: Another exception was thrown: NoSuchMethodError: The getter ‘pasteButtonLabel’ was called on null. 本篇说明解决方法:</p><p>1.首先在pubspec.yaml的dependencies下加入这个</p><p>flutter_localizations:</p><p> sdk: flutter</p><p>如图：</p><p><img src="http://i1.fuimg.com/691375/b153c965a4884a04.jpg" alt="Markdown"></p><p>2.然后在MaterialApp设置一下localizationsDelegates如图:</p><p><img src="http://i1.fuimg.com/691375/6de2850a818dbe7cs.jpg" alt="Markdown"></p><p>3.写一个类继承一下CupertinoLocalizations，在项目中<br>            我这个类名叫ChineseCupertinoLocalizations(没错，就是localizationsDelegates中的第三个)，如图：<br><img src="http://i1.fuimg.com/691375/7b468a74ab809741s.jpg" alt="Markdown"><br><img src="http://i1.fuimg.com/691375/c607b43c8b0d861c.jpg" alt="Markdown"><br> <img src="http://i1.fuimg.com/691375/7c1017e35c4a584cs.jpg" alt="Markdown"><br><img src="http://i1.fuimg.com/691375/7c1017e35c4a584cs.jpg" alt="Markdown"><br>上次提到报错的原因就是因为cutButtonLabel，copyButtonLabel，pasteButtonLabel，selectAllButtonLabel<br>            这几个按钮没有实现，所以继承CupertinoLocalizations一定要为这几个按钮赋值，这里是那种语言，那么，赋值就对应那种语言，同时要注意locale.languageCode也要填写，如果你是中文，那么locale.languageCode<br>            ==’zh’;</p><p>4.在ios工程中，在项目的info设置语言环境</p><p>添加 Localization native development region—&gt;china</p><p>添加一个Localizations 为array类型的，并且设置值为 Chinese (simplified)</p><p><img src="http://i1.fuimg.com/691375/2492a8342b78c39es.jpg" alt="Markdown"></p><p>效果图：（<strong>注意：请把手机环境调试成中文的语言环境</strong>）</p><p>Android<br><img src="http://i1.fuimg.com/691375/a7c124b30c10fe42s.jpg" alt="Markdown"></p><p>ios 效果图<br><img src="http://i1.fuimg.com/691375/89a99290c4de687as.jpg" alt="Markdown"></p><p>github地址</p><p><a href="https://github.com/hxxsocket/flutter_lg_demo" target="_blank" rel="noopener">https://github.com/hxxsocket/flutter_lg_demo</a></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Admin Deploy踩坑记录</title>
      <link href="/zxy12666.github.io/2019/03/01/Hexo-Admin-Deploy%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/zxy12666.github.io/2019/03/01/Hexo-Admin-Deploy%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jaredly/hexo-admin/issues/94" target="_blank" rel="noopener">hexo-admin/issues</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于Windows的某种原因，依据网站的大部分教程，均会抛出<code>deploy Error: spawn UNKNOWN</code>异常。而GitHub上issues给出了相关解决方案，现在总结一下具体的过程</p><h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><ul><li><p>打开站点配置文件(<code>\xxxx.github.io\_config.yml</code>)，在<code>admin</code>中加入<code>deployCommand: &amp;#39;sh hexo-deploy.sh&amp;#39;</code>。示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: 看不见</span><br><span class="line">  password_hash: 看不见</span><br><span class="line">  secret: 看不见</span><br><span class="line">  deployCommand: &apos;sh hexo-deploy.sh&apos;</span><br></pre></td></tr></table></figure></li><li><p>在根目录中(<code>\xxxx.github.io\</code>)新建<code>hexo-deploy.sh</code>文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li><p>打开deploy.js(<code>\xxxx.github.io\node_modules\hexo-admin\deploy.js</code>)，将<code>var proc = spawn(command, [message], {detached: true});</code>更改为<code>var proc = spawn((process.platform === &amp;quot;win32&amp;quot; ? &amp;quot;hexo.cmd&amp;quot; : &amp;quot;hexo&amp;quot;), [&amp;#39;d&amp;#39;, &amp;#39;-g&amp;#39;]);</code><br>更改完后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function (command, message, done) &#123;</span><br><span class="line">  done = once(done);</span><br><span class="line">  var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]);</span><br><span class="line">  var stdout = &apos;&apos;;</span><br><span class="line">  var stderr = &apos;&apos;;</span><br><span class="line">  proc.stdout.on(&apos;data&apos;, function(data)&#123;stdout += data.toString()&#125;)</span><br><span class="line">  proc.stderr.on(&apos;data&apos;, function(data)&#123;stderr += data.toString()&#125;)</span><br><span class="line">  proc.on(&apos;error&apos;, function(err) &#123;</span><br><span class="line">    done(err, &#123;stdout: stdout, stderr: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  proc.on(&apos;close&apos;, function () &#123;</span><br><span class="line">    done(null, &#123;stdout: stdout, stderr: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://i1.fuimg.com/691375/46a856c23ca1f9ccs.png" alt="Markdown"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令(含删除文件)</title>
      <link href="/zxy12666.github.io/2019/03/01/%E6%B5%8B%E8%AF%95/"/>
      <url>/zxy12666.github.io/2019/03/01/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>0.可以通过git branch -r 命令查看远端库的分支情况</p><p>&nbsp;<img src="http://bmob-cdn-23872.b0.upaiyun.com/2019/03/01/23dbdac54057592f80677bdcb7e2dbf0.png" alt></p><p>1,从已有的分支创建新的分支(如从master分支),创建一个dev分支</p><p>git checkout -b dev</p><p>2,创建完可以查看一下,分支已经切换到dev</p><p>git branch</p><p>&nbsp;&nbsp;&nbsp;&nbsp;* dev</p><p>&nbsp;&nbsp;&nbsp;&nbsp;master</p><p>3.建立本地到上游（远端）仓的链接 –这样代码才能提交上去</p><p><strong>git branch –set-upstream-to=origin/dev&nbsp;</strong></p><p><strong>取消对master的跟踪</strong></p><p><strong>git branch –unset-upstream master</strong></p><p>&nbsp;</p><p>git 创建分支提交远程分支 - oppotvr<br><a href="https://my.oschina.net/u/219482/blog/285584" target="_blank" rel="noopener">https://my.oschina.net/u/219482/blog/285584</a></p><p>&nbsp;</p><p>以下两个应该是同一个意思，=upstream : 上游码流的意思<br><strong>git branch –set-upstream-to=master</strong><br>git branch –set-upstream-to=original/master</p><p>git help branch<br>git branch [–set-upstream | –track | –no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]<br>git branch (–set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]<br>git branch –unset-upstream [&lt;branchname&gt;]</p><p>git branch –set-upstream-to=original/master new<br><strong>git branch –set-upstream debug origin/debug    //其中debug为创建的分支</strong></p><p>&nbsp;</p><p>提交该分支到远程仓库<br>git push origin dev</p><hr><h1 id="git-push-origin与git-push-u-origin-master的区别"><a href="#git-push-origin与git-push-u-origin-master的区别" class="headerlink" title="git push origin与git push -u origin master的区别"></a><a href="https://www.cnblogs.com/zhouj850/p/7260558.html" target="_blank" rel="noopener">git push origin与git push -u origin master的区别</a></h1><p><div class="clear">&nbsp;</div></p><p><div class="postBody"></div></p><div id="cnblogs_post_body" class="blogpost-body"><p><span lang="EN-US">$ git push origin</span></p><p>上面命令表示，将当前分支推送到<span lang="EN-US">origin主机的对应分支。<span lang="EN-US">&nbsp;</span></span></p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。<span lang="EN-US">&nbsp;</span></p><p><span lang="EN-US">$ git push 如果当前分支与多个主机存在追踪关系，那么这个时候<span lang="EN-US">-u选项会指定一个默认主机，这样后面就可以不加任何参数使用<span lang="EN-US">git push。</span></span></span></p><p><span lang="EN-US">$ git push -u origin master 上面命令将本地的<span lang="EN-US">master分支推送到<span lang="EN-US">origin主机，同时指定<span lang="EN-US">origin为默认主机，后面就可以不加任何参数使用<span lang="EN-US">git push了。</span></span></span></span></span></p><hr><h1 id="本地分支代码提交到远端库"><a href="#本地分支代码提交到远端库" class="headerlink" title="本地分支代码提交到远端库"></a>本地分支代码提交到远端库</h1><p>git push origin master<br>git push origin HEAD:refs/for/远端分支名</p><p>git push origin 本地分支名:refs/for/远端分支名</p><p>eg:<br>git push origin test:refs/for/master  #本地test分支代码提交到远端master库</p><hr><p><strong>在远端服务器新建分支：</strong></p><p><strong>方法1：</strong></p><p>git checkout -b dev</p><p>#建立本地到上游（远端）仓的链接 –这样代码才能提交上去<br>git branch –set-upstream-to=origin/dev<br>git branch –set-upstream debug origin/debug //其中debug为创建的分支<br>git push origin dev</p><p>#取消对master的跟踪<br>git branch –unset-upstream master</p><p>&nbsp;</p><p><strong>方法2：</strong></p><p>git branch -b stage2<br>git push origin 本地分支名:远端分支名xx&nbsp; // 在服務器新建新分支名xxx</p><p>&nbsp;</p><p>对比：</p><p>git branch -b stag2<br>git push origin stage2:refs/for/stage2   // 代码入庫命令，不会新建新分支在远端</p></div>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎！</title>
      <link href="/zxy12666.github.io/2019/02/22/hello-world/"/>
      <url>/zxy12666.github.io/2019/02/22/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎来到我的博客，我是程序员张翔宇"><a href="#欢迎来到我的博客，我是程序员张翔宇" class="headerlink" title="欢迎来到我的博客，我是程序员张翔宇"></a>欢迎来到我的博客，我是程序员张翔宇</h2><p><img src="http://bmob-cdn-23872.b0.upaiyun.com/2019/02/22/2b7b08d940e92d56803a42a1dae38bc1.jpg" alt>我来自江苏镇江，请多多指教！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
