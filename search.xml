<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo Admin Deploy踩坑记录]]></title>
    <url>%2F2019%2F03%2F01%2FHexo-Admin-Deploy%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[参考hexo-admin/issues 背景由于Windows的某种原因，依据网站的大部分教程，均会抛出deploy Error: spawn UNKNOWN异常。而GitHub上issues给出了相关解决方案，现在总结一下具体的过程 填坑 打开站点配置文件(\xxxx.github.io\_config.yml)，在admin中加入deployCommand: &amp;#39;sh hexo-deploy.sh&amp;#39;。示例： 12345admin: username: 看不见 password_hash: 看不见 secret: 看不见 deployCommand: &apos;sh hexo-deploy.sh&apos; 在根目录中(\xxxx.github.io\)新建hexo-deploy.sh文件，内容为： 1hexo g -d 打开deploy.js(\xxxx.github.io\node_modules\hexo-admin\deploy.js)，将var proc = spawn(command, [message], {detached: true});更改为var proc = spawn((process.platform === &amp;quot;win32&amp;quot; ? &amp;quot;hexo.cmd&amp;quot; : &amp;quot;hexo&amp;quot;), [&amp;#39;d&amp;#39;, &amp;#39;-g&amp;#39;]);更改完后的代码： 1234567891011121314module.exports = function (command, message, done) &#123; done = once(done); var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]); var stdout = &apos;&apos;; var stderr = &apos;&apos;; proc.stdout.on(&apos;data&apos;, function(data)&#123;stdout += data.toString()&#125;) proc.stderr.on(&apos;data&apos;, function(data)&#123;stderr += data.toString()&#125;) proc.on(&apos;error&apos;, function(err) &#123; done(err, &#123;stdout: stdout, stderr: stderr&#125;); &#125;); proc.on(&apos;close&apos;, function () &#123; done(null, &#123;stdout: stdout, stderr: stderr&#125;); &#125;);&#125; 效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令(含删除文件)]]></title>
    <url>%2F2019%2F03%2F01%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[0.可以通过git branch -r 命令查看远端库的分支情况 &nbsp; 1,从已有的分支创建新的分支(如从master分支),创建一个dev分支 git checkout -b dev 2,创建完可以查看一下,分支已经切换到dev git branch &nbsp;&nbsp;&nbsp;&nbsp;* dev &nbsp;&nbsp;&nbsp;&nbsp;master 3.建立本地到上游（远端）仓的链接 –这样代码才能提交上去 git branch –set-upstream-to=origin/dev&nbsp; 取消对master的跟踪 git branch –unset-upstream master &nbsp; git 创建分支提交远程分支 - oppotvrhttps://my.oschina.net/u/219482/blog/285584 &nbsp; 以下两个应该是同一个意思，=upstream : 上游码流的意思git branch –set-upstream-to=mastergit branch –set-upstream-to=original/master git help branchgit branch [–set-upstream | –track | –no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]git branch (–set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]git branch –unset-upstream [&lt;branchname&gt;] git branch –set-upstream-to=original/master newgit branch –set-upstream debug origin/debug //其中debug为创建的分支 &nbsp; 提交该分支到远程仓库git push origin dev git push origin与git push -u origin master的区别&nbsp; $ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。&nbsp; 如果当前分支只有一个追踪分支，那么主机名都可以省略。&nbsp; $ git push 如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。 $ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 本地分支代码提交到远端库git push origin mastergit push origin HEAD:refs/for/远端分支名 git push origin 本地分支名:refs/for/远端分支名 eg:git push origin test:refs/for/master #本地test分支代码提交到远端master库 在远端服务器新建分支： 方法1： git checkout -b dev #建立本地到上游（远端）仓的链接 –这样代码才能提交上去git branch –set-upstream-to=origin/devgit branch –set-upstream debug origin/debug //其中debug为创建的分支git push origin dev #取消对master的跟踪git branch –unset-upstream master &nbsp; 方法2： git branch -b stage2git push origin 本地分支名:远端分支名xx&nbsp; // 在服務器新建新分支名xxx &nbsp; 对比： git branch -b stag2git push origin stage2:refs/for/stage2 // 代码入庫命令，不会新建新分支在远端]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎！]]></title>
    <url>%2F2019%2F02%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客，我是程序员张翔宇我来自江苏镇江，请多多指教！]]></content>
  </entry>
</search>
